package com.example.android.bluetoothlegatt_touchMe.com.main_menu;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.bluetooth.BluetoothGattCharacteristic;
import android.bluetooth.BluetoothGattService;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.content.pm.ActivityInfo;
import android.graphics.Point;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.util.Log;
import android.view.Display;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.example.android.bluetoothlegatt_touchMe.Common.CommonData;
import com.example.android.bluetoothlegatt_touchMe.R;
import com.example.android.bluetoothlegatt_touchMe.com.BluetoothLeService;
import com.example.android.bluetoothlegatt_touchMe.com.DeviceControlActivity;
import com.example.android.bluetoothlegatt_touchMe.com.SampleGattAttributes;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

import static com.example.android.bluetoothlegatt_touchMe.Common.CommonData.CMD_PLAY_NODE_DO;
import static com.example.android.bluetoothlegatt_touchMe.Common.CommonData.CMD_PLAY_NODE_MI;
import static com.example.android.bluetoothlegatt_touchMe.Common.CommonData.CMD_PLAY_NODE_PA;
import static com.example.android.bluetoothlegatt_touchMe.Common.CommonData.CMD_PLAY_NODE_RA;
import static com.example.android.bluetoothlegatt_touchMe.Common.CommonData.CMD_PLAY_NODE_RE;
import static com.example.android.bluetoothlegatt_touchMe.Common.CommonData.CMD_PLAY_NODE_SI;
import static com.example.android.bluetoothlegatt_touchMe.Common.CommonData.CMD_PLAY_NODE_SO;
import static com.example.android.bluetoothlegatt_touchMe.Common.CommonData.TOUCH_GTO_TEST1;
import static com.example.android.bluetoothlegatt_touchMe.Common.CommonData.TOUCH_GTO_TEST2;
import static com.example.android.bluetoothlegatt_touchMe.com.DeviceControlActivity.action;
import static com.example.android.bluetoothlegatt_touchMe.com.DeviceControlActivity.mGattCharacteristics;
import static com.example.android.bluetoothlegatt_touchMe.com.DeviceControlActivity.packet;

import static android.bluetooth.BluetoothProfile.STATE_CONNECTED;
import static com.example.android.bluetoothlegatt_touchMe.com.BluetoothLeService.EXTRA_DATA;
import static com.example.android.bluetoothlegatt_touchMe.com.BluetoothLeService.JDY_RX_MEASUREMENT;
import static com.example.android.bluetoothlegatt_touchMe.com.BluetoothLeService.JDY_TX_MEASUREMENT;
import static com.example.android.bluetoothlegatt_touchMe.com.BluetoothLeService.RX_CHAR_UUID;
import static com.example.android.bluetoothlegatt_touchMe.com.BluetoothLeService.RX_SERVICE_UUID;
import static com.example.android.bluetoothlegatt_touchMe.com.DeviceControlActivity.run_btn;
import static com.example.android.bluetoothlegatt_touchMe.com.main_menu.NodeScanningActivity.node_count;
import static com.example.android.bluetoothlegatt_touchMe.com.main_menu.NodeScanningActivity.scan_node_count;
import static com.example.android.bluetoothlegatt_touchMe.com.main_menu.SetupActivity.act_flag;
import static com.example.android.bluetoothlegatt_touchMe.com.main_menu.SetupActivity.auto_flag;
import static com.example.android.bluetoothlegatt_touchMe.com.main_menu.SetupActivity.color_flag;
import static com.example.android.bluetoothlegatt_touchMe.com.main_menu.SetupActivity.set_color_flag;
import static com.example.android.bluetoothlegatt_touchMe.com.main_menu.SetupActivity.timer_setting;
import static com.example.android.bluetoothlegatt_touchMe.com.main_menu.SetupActivity.voice_flag;
import static com.example.android.bluetoothlegatt_touchMe.com.main_menu.SetupActivity.cds_flag;

/**
 * Created by GTO on 2020-01-22.
 */

public class RunActivity extends Activity {
    private final static String TAG = "DCA";

    public static final String EXTRAS_DEVICE_NAME = "DEVICE_NAME";
    public static final String EXTRAS_DEVICE_ADDRESS = "DEVICE_ADDRESS";

    //TODO: BLE variable
    private TextView mConnectionState;
    private SimpleDateFormat mFormat = new SimpleDateFormat("HH:mm:ss");
    public static final int DUMP = -1;

    public String mDeviceName;
    public String mDeviceAddress;
    public static BluetoothLeService mBluetoothLeService;

    public static ImageView node_imageView01, node_imageView02, node_imageView03, node_imageView04, node_imageView05, node_imageView06;

    /*public ArrayList<ArrayList<BluetoothGattCharacteristic>> mGattCharacteristics =
            new ArrayList<ArrayList<BluetoothGattCharacteristic>>();*/
    private boolean mConnected = false;
    private BluetoothGattCharacteristic mNotifyCharacteristic;

    private final String LIST_NAME = "NAME";
    private final String LIST_UUID = "UUID";

    int standardSize_X, standardSize_Y;
    float density;

    public String node_number, node_COMMAND, node_SF;
    private static int MASTER_LED;

    private TextView mTimeTextView, mRecordTextView;
    private Button mStopBtn, mStartBtn;

    private Thread timeThread = null;
    private Boolean isRunning = true;

    private TextView node1, node2, node3, node4, node5, node6;
    private Button master, nodeBtn1, nodeBtn2, nodeBtn3, nodeBtn4, nodeBtn5, nodeBtn6, nodeBtn7, nodeBtn8, nodeBtn9;
    public static int NODE_COUNT_REQ_0, NODE_COUNT_REQ_1, NODE_COUNT_REQ_2, NODE_COUNT_REQ_3, NODE_COUNT_REQ_4, NODE_COUNT_REQ_5, NODE_COUNT_REQ_6, NODE_COUNT_REQ_7, NODE_COUNT_REQ_8, NODE_COUNT_REQ_9;
    public static int NODE_COUNT_ACK_0, NODE_COUNT_ACK_1, NODE_COUNT_ACK_2, NODE_COUNT_ACK_3, NODE_COUNT_ACK_4, NODE_COUNT_ACK_5, NODE_COUNT_ACK_6, NODE_COUNT_ACK_7, NODE_COUNT_ACK_8, NODE_COUNT_ACK_9;
    public static int report_mSec, report_sec, report_min, report_hour;

    private int timer_flag;

    private static int play_success_count, play_fail_count;

    public static int sound_clicked_num;

    private Random rnd;
    private int timer_sec, count;
    private int node_act;

    private Handler node_handler;

    private Handler center_handler;

    private Timer timer;
    private TimerTask timerTask;

    private byte mode_b, mode_sound, mode_led, cmd_play_node_time;

    private int mode_count = 1;

    private TimerTask second;
    private final Handler rnd_handler = new Handler();
    public void testStart() {
        timer_sec = 0;
        count = 0;
        second = new TimerTask() {
            @Override
            public void run() {
                Log.i("Test", "Timer start");
                Update();
                timer_sec++;
            }
        };

        Timer timer = new Timer();
        timer.schedule(second, 0, timer_setting*1000);
        //timer.schedule(timerTask, 0, 1000);
        if (cds_flag == 1) {
            node_play();
        }
        else if (cds_flag == 0){
            center_play();
        }

        NODE_COUNT_REQ_0 = 0; NODE_COUNT_REQ_1 = 0; NODE_COUNT_REQ_2 = 0; NODE_COUNT_REQ_3 = 0; NODE_COUNT_REQ_4 = 0;
        NODE_COUNT_REQ_5 = 0; NODE_COUNT_REQ_6 = 0; NODE_COUNT_REQ_7 = 0; NODE_COUNT_REQ_8 = 0; NODE_COUNT_REQ_9 = 0;

        NODE_COUNT_ACK_0 = 0; NODE_COUNT_ACK_1 = 0; NODE_COUNT_ACK_2 = 0; NODE_COUNT_ACK_3 = 0; NODE_COUNT_ACK_4 = 0;
        NODE_COUNT_ACK_5 = 0; NODE_COUNT_ACK_6 = 0; NODE_COUNT_ACK_7 = 0; NODE_COUNT_ACK_8 = 0; NODE_COUNT_ACK_9 = 0;
    }
    public void testStop(){
        //second.cancel();
        //timerTask.cancel();
        try {
            second.cancel();
            timerTask.cancel();
            master.setBackgroundResource(R.drawable.orange_circle_button_off);
            nodeBtn1.setBackgroundResource(R.drawable.black_circle_button_off);
            nodeBtn2.setBackgroundResource(R.drawable.black_circle_button_off);
            nodeBtn3.setBackgroundResource(R.drawable.black_circle_button_off);
            nodeBtn4.setBackgroundResource(R.drawable.black_circle_button_off);
            nodeBtn5.setBackgroundResource(R.drawable.black_circle_button_off);
            nodeBtn6.setBackgroundResource(R.drawable.black_circle_button_off);
            nodeBtn7.setBackgroundResource(R.drawable.black_circle_button_off);
            nodeBtn8.setBackgroundResource(R.drawable.black_circle_button_off);
            nodeBtn9.setBackgroundResource(R.drawable.black_circle_button_off);
        }
        catch (NullPointerException e) {
            e.printStackTrace();
            Toast.makeText(getApplicationContext(),"value of null",
                    Toast.LENGTH_LONG).show();
        }/*
        master.setBackgroundResource(R.drawable.orange_circle_button_off);
        nodeBtn1.setBackgroundResource(R.drawable.black_circle_button_off);
        nodeBtn2.setBackgroundResource(R.drawable.black_circle_button_off);
        nodeBtn3.setBackgroundResource(R.drawable.black_circle_button_off);
        nodeBtn4.setBackgroundResource(R.drawable.black_circle_button_off);
        nodeBtn5.setBackgroundResource(R.drawable.black_circle_button_off);
        nodeBtn6.setBackgroundResource(R.drawable.black_circle_button_off);
        nodeBtn7.setBackgroundResource(R.drawable.black_circle_button_off);
        nodeBtn8.setBackgroundResource(R.drawable.black_circle_button_off);
        nodeBtn9.setBackgroundResource(R.drawable.black_circle_button_off);*/
    }

    public void center_play(){
        timer = new Timer(true);
        timerTask = new TimerTask() {
            @Override
            public void run() {
                Log.v(TAG,"center run");
                Message msg = center_handler.obtainMessage();
                center_handler.sendMessage(msg);
            }

            @Override
            public boolean cancel() {
                Log.v(TAG,"timer cancel");
                return super.cancel();
            }
        };
        timer.schedule(timerTask, 0, timer_setting*1000);
    }

    public void node_play() {
        timer = new Timer(true);
        timerTask = new TimerTask() {
            @Override
            public void run() {
                Log.v(TAG,"dispersion run");
                Message msg = node_handler.obtainMessage();
                node_handler.sendMessage(msg);
            }

            @Override
            public boolean cancel() {
                Log.v(TAG,"timer cancel");
                return super.cancel();
            }
        };
        timer.schedule(timerTask, 0, timer_setting*1000);
    }

    protected void Update() {
        Runnable updater = new Runnable() {
            public void run() {
                if (auto_flag == 0) {
                    node_act = rnd.nextInt((scan_node_count) + 1);
                    /*
                    if (node_act == 0) {
                        node_act = node_act+1;
                    }*/
                }
                else {
                    node_act++;
                    if (node_act > scan_node_count){
                        node_act = 1;
                    }
                }

                System.out.println("Random num "+ "[" + scan_node_count + "] = " + node_act);

                mode_count++;
                if (mode_count > 7) {
                    mode_count = 1;
                }

                //mode_sound = (byte) (10*mode_count);

                mode_sound = (byte) 0x10;

                if (color_flag == 0) {
                    mode_led = (byte) 0x08;
                }
                else if (color_flag == 1) {
                    mode_led = (byte) set_color_flag;
                }

                //mode_b = (byte) (mode_sound + mode_led);        // 13 23 33 43 53 63 73

                if (voice_flag == 1) {      // voice on -> sound + led
                    //mode_b = (byte) (mode_sound + mode_led);
                    mode_b = (byte) ((mode_sound * mode_count) + mode_led);
                    //System.out.println("mode sound ->"+mode_sound);
                }
                else if (voice_flag == 0) { // voice off -> just led
                    mode_b = mode_led;
                }

                //mode_b = (byte) (mode_sound + mode_led);

                cmd_play_node_time = (byte) timer_setting;
                System.out.println("Random char = " + mode_b);

                //Random rnd_test = new Random();
                //String randomStr = String.valueOf((char) ((int) (rnd_test.nextInt(108)) + 11));
                //stringToHex(randomStr);
                //System.out.println("Random char = " + stringToHex0x(randomStr));
            }
        };
        rnd_handler.post(updater);
    }

    public Point getScreenSize(Activity activity) {
        Display display = activity.getWindowManager().getDefaultDisplay();
        Point size = new Point();
        display.getSize(size);

        return size;
    }

    public void getStandardSize() {
        Point ScreenSize = getScreenSize(this);
        density  = getResources().getDisplayMetrics().density;

        standardSize_X = (int) (ScreenSize.x / density);
        standardSize_Y = (int) (ScreenSize.y / density);
    }

    // Code to manage Service lifecycle.
    private final ServiceConnection mServiceConnection = new ServiceConnection() {

        @Override
        public void onServiceConnected(ComponentName componentName, IBinder service) {

            mBluetoothLeService = ((BluetoothLeService.LocalBinder) service).getService();
            if (!mBluetoothLeService.initialize()) {
                Log.e(TAG, "Unable to initialize Bluetooth");
                finish();
            }
            // Automatically connects to the device upon successful start-up initialization.
            mBluetoothLeService.connect(mDeviceAddress);
        }

        @Override
        public void onServiceDisconnected(ComponentName componentName) {
            mBluetoothLeService = null;
        }
    };

    private final BroadcastReceiver mGattUpdateReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            //String action = intent.getAction();
            if (BluetoothLeService.ACTION_GATT_CONNECTED.equals(action)) {
                mConnected = true;
                updateConnectionState(R.string.connected);
                Log.w(TAG, String.format("run connected "));

                invalidateOptionsMenu();
            } else if (BluetoothLeService.ACTION_GATT_DISCONNECTED.equals(action)) {
                mConnected = false;
                updateConnectionState(